<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/templates/index.html;C:/Users/Adrian/PycharmProjects/TradingBot_alpha_1.0.0/agent.py;C:/Users/Adrian/PycharmProjects/TradingBot_alpha_1.0.0/config.py;C:/Users/Adrian/PycharmProjects/TradingBot_alpha_1.0.0/data_fetcher.py;C:/Users/Adrian/PycharmProjects/TradingBot_alpha_1.0.0/database.py;C:/Users/Adrian/PycharmProjects/TradingBot_alpha_1.0.0/features.py;C:/Users/Adrian/PycharmProjects/TradingBot_alpha_1.0.0/main.py;C:/Users/Adrian/PycharmProjects/TradingBot_alpha_1.0.0/main_multi.py;C:/Users/Adrian/PycharmProjects/TradingBot_alpha_1.0.0/panel.py;C:/Users/Adrian/PycharmProjects/TradingBot_alpha_1.0.0/simulator.py;C:/Users/Adrian/PycharmProjects/TradingBot_alpha_1.0.0/utils.py" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;C:/Users/Adrian/PycharmProjects/TradingBot_alpha_1.0.0&quot;:&quot;{\&quot;/agent.py\&quot;:\&quot;This file contains a reinforcement learning agent for trading in the forex market. It includes the following classes and functions:\\n\\n`RLAgent`: A PyTorch neural network model that serves as the reinforcement learning agent.\\n\\n`train_agent`: The main function that trains the reinforcement learning agent on historical forex data, using a custom reward function and trading strategy.\\n\\nThe file also imports various modules and functions from other files, such as `get_state`, `prepare_data`, `get_data`, `fetch_sentiment`, `save_trade_to_db`, and `simulate_trade`, which are used to preprocess the data, fetch market data and sentiment, save trade information, and simulate trades, respectively.\&quot;,\&quot;/simulator.py\&quot;:\&quot;This file does not contain any classes. It contains the following functions:\\n\\n`main()`: Selects a random forex symbol, fetches historical data and sentiment data, trains an RL agent, and runs a backtest on the remaining data.\\n\\n`if __name__ \\u003d\\u003d \\u0027__main__\\u0027`: Presents a menu with three options: (1) Train and Backtest, (2) Live Mode, and (3) Backtest Only, and executes the corresponding functionality.\\n\\nIn summary, this file is a main entry point for a forex trading system that uses reinforcement learning to train an agent, and provides options for training, backtesting, and live trading.\&quot;,\&quot;/main.py\&quot;:\&quot;This file does not contain any classes. It contains the following functions:\\n\\n`main()`: Selects a random forex symbol, fetches historical data and sentiment data, trains an RL agent, and runs a backtest on the remaining data.\\n\\n`if __name__ \\u003d\\u003d \\u0027__main__\\u0027`: Presents a menu with three options: (1) Train and Backtest, (2) Live Mode, and (3) Backtest Only, and executes the corresponding functionality.\\n\\nIn summary, this file is a main entry point for a forex trading system that uses reinforcement learning to train an agent, and provides options for training, backtesting, and live trading.\&quot;,\&quot;/panel.py\&quot;:\&quot;This file is a Flask web application that displays trading data and statistics. It does not contain any classes, but it has the following functions:\\n\\n`get_trades()`: Retrieves the 50 most recent trades from a SQLite database.\\n\\n`get_equity_curve()`: Retrieves the equity log data from a SQLite database and returns a Pandas DataFrame.\\n\\n`generate_equity_plot(df)`: Generates a plot of the equity curve using the provided Pandas DataFrame and returns the plot as a base64-encoded image.\\n\\n`get_summary_stats()`: Calculates various summary statistics, such as the total number of trades, mean PnL, and the number of buy, stop-loss, and take-profit trades.\\n\\n`get_live_status()`: Retrieves the most recent live status data from a SQLite database.\\n\\n`index()`: The main route handler that renders the HTML template with the trading data, equity plot, and summary statistics.\\n\\n`live()`: A route handler that returns the most recent live status data as a JSON response.\\n\\nThe file sets up a Flask application, defines the necessary functions to interact with the SQLite database and generate the required data, and provides two routes: one for the main page and one for the live status data.\&quot;,\&quot;/templates/index.html\&quot;:\&quot;This file is an HTML document that serves as a trading bot panel. It displays live trading data, general statistics, an equity plot, and a table of recent trades. The file does not contain any classes or functions, but it uses JavaScript to fetch and update the live trading data every 30 seconds.\\n\\nThe main elements of the file are:\\n\\n`body`: Defines the overall structure and styling of the web page.\\n`div.container`: Wraps the content of the page within a centered container.\\n`div.section`: Divides the content into separate sections with a consistent style.\\n`div#live-content`: Displays the live trading data, including the current time, price, bot action, position, balance, and equity.\\n`div.section`: Displays general statistics about the trading activity, such as the total number of trades, average profit/loss, and the number of buy/sell positions.\\n`div.section`: Displays an equity plot, if available.\\n`table`: Displays a table of the most recent trades, including the time, action, entry price, exit price, and profit/loss.\\n`script`: Contains a JavaScript function `updateLive()` that fetches and updates the live trading data every 30 seconds.\&quot;,\&quot;/data_fetcher.py\&quot;:\&quot;This file does not contain any classes. It contains the following functions:\\n\\n`get_ema200`: Function fetches data from MetaTrader5 and calculates EMA200 for the given symbol, returning the EMA200 value on the last candle.\\n\\n`prepare_data`: Function prepares data for the model, including technical indicators and sentiment.\\n\\n`get_state`: Function transforms one row of data into a feature vector.\\n\\n`identify_strategy`: Function identifies which strategy is applicable based on the row data.\\n\\nThis file is a Python script that provides functions to fetch and process financial data from MetaTrader5, calculate technical indicators, and identify trading strategies based on the data.\&quot;,\&quot;/utils.py\&quot;:\&quot;This file does not contain any classes. It contains the following functions:\\n\\n`simulate_trade`: This function simulates a trade and calculates a reward based on various trading strategies and market conditions.\\n\\n`should_close_position`: This function determines whether a position should be closed based on the current price, entry price, and the position type (long or short).\\n\\nThe file implements multiple trading strategies, including MACD + Stochastic, Candle Formations, Fibonacci retracements, Harmonic patterns, Volume confirmation, and Moving Average Crossover. It also includes an improved ADX trend strength bonus and a signal quality summary.\&quot;,\&quot;/features.py\&quot;:\&quot;This file does not contain any classes. It contains the following functions:\\n\\n`get_ema200`: Retrieves data from MetaTrader 5 and calculates the EMA200 (Exponential Moving Average with a 200-period window) for a given symbol.\\n\\n`prepare_data`: Prepares the data for the model, including calculating technical indicators and adding sentiment data.\\n\\n`get_state`: Transforms a single row of data into a feature vector.\\n\\n`identify_strategy`: Identifies the appropriate trading strategy based on the data in the row.\\n\\nThe file appears to be part of a larger trading system that uses technical indicators and sentiment data to identify trading strategies.\&quot;,\&quot;/database.py\&quot;:\&quot;This file does not contain any classes. It contains the following functions:\\n\\n`save_trade_to_db`: Saves a trade record to a SQLite database table named \\\&quot;trades\\\&quot;.\\n\\n`log_equity_to_db`: Logs the current timestamp, balance, equity, and position to a SQLite database table named \\\&quot;equity_log\\\&quot;.\\n\\n`update_live_status`: Updates the current live status (timestamp, price, action, position, balance, equity) in a SQLite database table named \\\&quot;live_status\\\&quot;.\\n\\nThis file provides a set of functions to interact with a SQLite database to store and update trading-related data, such as trade records, equity history, and live status.\&quot;,\&quot;/config.py\&quot;:\&quot;This file appears to be a configuration file that sets up various constants and variables for a trading system. There are no classes or functions defined in this file. The file sets up the following:\\n\\n1. API_KEY: The API key for the trading platform.\\n2. INITIAL_BALANCE: The initial balance for the trading account.\\n3. STATE_SIZE: The size of the feature vector used in the trading system.\\n4. ACTIONS: The available actions for the trading system (HOLD, BUY, SELL).\\n5. EPSILON: The exploration rate for the trading system.\\n6. GAMMA: The discount factor for the trading system.\\n7. SPREAD_PCT: The percentage spread for the trading platform.\\n8. MAX_PATIENCE_BONUS: The maximum patience bonus for the trading system.\\n9. forex_symbols: A list of forex symbols to be used in the trading system.\&quot;,\&quot;/main_multi.py\&quot;:\&quot;This file does not contain any classes. It contains the following functions:\\n\\n`worker`: Trains a reinforcement learning agent on a randomly selected forex symbol and time period, and updates the shared model parameters.\\n\\n`evaluate_model`: Evaluates the performance of a given model on the EURUSD symbol.\\n\\n`main`: Sets up the shared model, spawns multiple worker processes, and saves the trained shared model.\\n\\nThe file implements a multi-process reinforcement learning training pipeline for a forex trading agent, where each worker process trains on a different symbol and time period, and the shared model is updated synchronously.\&quot;}&quot;}" />
    <option name="fileSkeletonMaps" value="{&quot;C:/Users/Adrian/PycharmProjects/TradingBot_alpha_1.0.0&quot;:&quot;{\&quot;/templates/index.html\&quot;:{\&quot;file_path\&quot;:\&quot;/templates/index.html\&quot;,\&quot;file_name\&quot;:\&quot;index.html\&quot;,\&quot;methods\&quot;:[]},\&quot;/agent.py\&quot;:{\&quot;file_path\&quot;:\&quot;/agent.py\&quot;,\&quot;file_name\&quot;:\&quot;agent.py\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;__init__\&quot;,\&quot;method_parameters\&quot;:\&quot;(self, input_size)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;self\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;input_size\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[15,4],[21,9]]},{\&quot;method_name\&quot;:\&quot;forward\&quot;,\&quot;method_parameters\&quot;:\&quot;(self, x)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;self\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;x\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[23,4],[24,28]]},{\&quot;method_name\&quot;:\&quot;train_agent\&quot;,\&quot;method_parameters\&quot;:\&quot;(df, max_episodes\\u003d1000, timeframe\\u003d\\u00275m\\u0027, reward_balance_weight\\u003d5.0)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;df\&quot;},{\&quot;type\&quot;:\&quot;1000\&quot;,\&quot;name\&quot;:\&quot;max_episodes\&quot;},{\&quot;type\&quot;:\&quot;\\u00275m\\u0027\&quot;,\&quot;name\&quot;:\&quot;timeframe\&quot;},{\&quot;type\&quot;:\&quot;5.0\&quot;,\&quot;name\&quot;:\&quot;reward_balance_weight\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[27,0],[140,16]]}]},\&quot;/config.py\&quot;:{\&quot;file_path\&quot;:\&quot;/config.py\&quot;,\&quot;file_name\&quot;:\&quot;config.py\&quot;,\&quot;methods\&quot;:[]},\&quot;/data_fetcher.py\&quot;:{\&quot;file_path\&quot;:\&quot;/data_fetcher.py\&quot;,\&quot;file_name\&quot;:\&quot;data_fetcher.py\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;get_ema200\&quot;,\&quot;method_parameters\&quot;:\&quot;(symbol)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;symbol\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[5,0],[17,32]]},{\&quot;method_name\&quot;:\&quot;prepare_data\&quot;,\&quot;method_parameters\&quot;:\&quot;(df, sentiment, symbol)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;df\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;sentiment\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;symbol\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[20,0],[59,13]]},{\&quot;method_name\&quot;:\&quot;get_state\&quot;,\&quot;method_parameters\&quot;:\&quot;(row)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;row\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[62,0],[69,24]]},{\&quot;method_name\&quot;:\&quot;identify_strategy\&quot;,\&quot;method_parameters\&quot;:\&quot;(row)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;row\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[72,0],[82,19]]}]},\&quot;/database.py\&quot;:{\&quot;file_path\&quot;:\&quot;/database.py\&quot;,\&quot;file_name\&quot;:\&quot;database.py\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;save_trade_to_db\&quot;,\&quot;method_parameters\&quot;:\&quot;(trade)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;trade\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[2,0],[11,16]]},{\&quot;method_name\&quot;:\&quot;log_equity_to_db\&quot;,\&quot;method_parameters\&quot;:\&quot;(timestamp, balance, equity, position)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;timestamp\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;balance\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;equity\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;position\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[13,0],[22,16]]},{\&quot;method_name\&quot;:\&quot;update_live_status\&quot;,\&quot;method_parameters\&quot;:\&quot;(timestamp, price, action, position, balance, equity)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;timestamp\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;price\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;action\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;position\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;balance\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;equity\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[24,0],[34,16]]}]},\&quot;/features.py\&quot;:{\&quot;file_path\&quot;:\&quot;/features.py\&quot;,\&quot;file_name\&quot;:\&quot;features.py\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;get_ema200\&quot;,\&quot;method_parameters\&quot;:\&quot;(symbol)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;symbol\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[4,0],[16,32]]},{\&quot;method_name\&quot;:\&quot;prepare_data\&quot;,\&quot;method_parameters\&quot;:\&quot;(df, sentiment)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;df\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;sentiment\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[19,0],[50,13]]},{\&quot;method_name\&quot;:\&quot;get_state\&quot;,\&quot;method_parameters\&quot;:\&quot;(row)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;row\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[53,0],[60,24]]},{\&quot;method_name\&quot;:\&quot;identify_strategy\&quot;,\&quot;method_parameters\&quot;:\&quot;(row)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;row\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[62,0],[74,19]]}]},\&quot;/main.py\&quot;:{\&quot;file_path\&quot;:\&quot;/main.py\&quot;,\&quot;file_name\&quot;:\&quot;main.py\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;main\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[12,0],[23,44]]}]},\&quot;/main_multi.py\&quot;:{\&quot;file_path\&quot;:\&quot;/main_multi.py\&quot;,\&quot;file_name\&quot;:\&quot;main_multi.py\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;worker\&quot;,\&quot;method_parameters\&quot;:\&quot;(rank, shared_model, lock)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;rank\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;shared_model\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;lock\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[12,0],[119,115]]},{\&quot;method_name\&quot;:\&quot;evaluate_model\&quot;,\&quot;method_parameters\&quot;:\&quot;(model, symbol\\u003d\\u0027EURUSD\\u0027)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;model\&quot;},{\&quot;type\&quot;:\&quot;\\u0027EURUSD\\u0027\&quot;,\&quot;name\&quot;:\&quot;symbol\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[122,0],[135,23]]},{\&quot;method_name\&quot;:\&quot;main\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[138,0],[160,69]]}]},\&quot;/panel.py\&quot;:{\&quot;file_path\&quot;:\&quot;/panel.py\&quot;,\&quot;file_name\&quot;:\&quot;panel.py\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;get_trades\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[9,0],[14,17]]},{\&quot;method_name\&quot;:\&quot;get_equity_curve\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[16,0],[20,13]]},{\&quot;method_name\&quot;:\&quot;generate_equity_plot\&quot;,\&quot;method_parameters\&quot;:\&quot;(df)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;df\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[22,0],[33,52]]},{\&quot;method_name\&quot;:\&quot;get_summary_stats\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[35,0],[44,81]]},{\&quot;method_name\&quot;:\&quot;get_live_status\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[46,0],[53,14]]},{\&quot;method_name\&quot;:\&quot;index\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[56,0],[62,104]]},{\&quot;method_name\&quot;:\&quot;live\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[65,0],[67,78]]}]},\&quot;/simulator.py\&quot;:{\&quot;file_path\&quot;:\&quot;/simulator.py\&quot;,\&quot;file_name\&quot;:\&quot;simulator.py\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;main\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[12,0],[23,44]]}]},\&quot;/utils.py\&quot;:{\&quot;file_path\&quot;:\&quot;/utils.py\&quot;,\&quot;file_name\&quot;:\&quot;utils.py\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;simulate_trade\&quot;,\&quot;method_parameters\&quot;:\&quot;(entry, exit_, pos_type, held\\u003d0, no_trade_steps\\u003d0, is_consolidating\\u003dFalse, price_history\\u003dNone,\\r\\n                   volume_history\\u003dNone, cumulative_pnl\\u003d0)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;entry\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;exit_\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;pos_type\&quot;},{\&quot;type\&quot;:\&quot;0\&quot;,\&quot;name\&quot;:\&quot;held\&quot;},{\&quot;type\&quot;:\&quot;0\&quot;,\&quot;name\&quot;:\&quot;no_trade_steps\&quot;},{\&quot;type\&quot;:\&quot;False\&quot;,\&quot;name\&quot;:\&quot;is_consolidating\&quot;},{\&quot;type\&quot;:\&quot;None\&quot;,\&quot;name\&quot;:\&quot;price_history\&quot;},{\&quot;type\&quot;:\&quot;None\&quot;,\&quot;name\&quot;:\&quot;volume_history\&quot;},{\&quot;type\&quot;:\&quot;0\&quot;,\&quot;name\&quot;:\&quot;cumulative_pnl\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[3,0],[255,22]]},{\&quot;method_name\&quot;:\&quot;should_close_position\&quot;,\&quot;method_parameters\&quot;:\&quot;(entry, current, pos_type, held, atr\\u003dNone)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;entry\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;current\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;pos_type\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;held\&quot;},{\&quot;type\&quot;:\&quot;None\&quot;,\&quot;name\&quot;:\&quot;atr\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[258,0],[273,35]]}]}}&quot;}" />
  </component>
</project>